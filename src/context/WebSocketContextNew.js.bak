import React, { createContext, useContext, useEffect, useRef, useState, useCallback } from 'react';
import { AUTH_TOKEN, API_URL } from '../config';

// Connection status types
export const CONNECTION_STATUS = {
  DISCONNECTED: 'disconnected',
  CONNECTING: 'connecting',
  CONNECTED: 'connected',
  AUTHENTICATING: 'authenticating',
  AUTHENTICATED: 'authenticated',
  ERROR: 'error',
  RECONNECTING: 'reconnecting'
};

// Message types
const MESSAGE_TYPES = {
  AUTHENTICATE: 'authenticate',
  PING: 'ping',
  PONG: 'pong',
  WELCOME: 'welcome',
  ERROR: 'error'
};

// Connection configuration
const CONFIG = {
  MAX_RECONNECT_ATTEMPTS: 5,
  RECONNECT_DELAY: 1000, // 1 second
  MAX_RECONNECT_DELAY: 30000, // 30 seconds
  CONNECTION_TIMEOUT: 10000, // 10 seconds
  HEARTBEAT_INTERVAL: 25000, // 25 seconds (server sends every 30s)
  MAX_QUEUE_SIZE: 100
};

// Create WebSocket context with default value
const WebSocketContext = createContext({
  socket: null,
  isConnected: false,
  isAuthenticated: false,
  connectionStatus: CONNECTION_STATUS.DISCONNECTED,
  connectionId: null,
  userId: null,
  sendMessage: () => Promise.reject('WebSocket not initialized'),
  onMessage: () => () => {},
  authenticate: () => Promise.reject('WebSocket not initialized')
});

// Custom hook to safely access the WebSocket context
export const useWebSocket = () => {
  const context = useContext(WebSocketContext);
  if (context === undefined) {
    throw new Error('useWebSocket must be used within a WebSocketProvider');
  }
  return context;
};

export const WebSocketProvider = ({ children }) => {
  const [connectionStatus, setConnectionStatus] = useState(CONNECTION_STATUS.DISCONNECTED);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [connectionId, setConnectionId] = useState(null);
  const [userId, setUserId] = useState(null);
  
  const reconnectAttempts = useRef(0);
  const reconnectTimeout = useRef(null);
  const connectionTimeout = useRef(null);
  const heartbeatInterval = useRef(null);
  const isMounted = useRef(true);
  const messageQueue = useRef([]);
  const messageHandlers = useRef(new Map());
  const ws = useRef(null);
  const latestToken = useRef(null);
  const pendingAuth = useRef(null);
  const lastActivity = useRef(Date.now());

  // Get the authentication token
  const getToken = useCallback(() => {
    try {
      const token = localStorage.getItem(AUTH_TOKEN);
      if (!token) {
        console.debug('No auth token found in storage');
      }
      return token;
    } catch (error) {
      console.error('Error getting auth token:', error);
      return null;
    }
  }, []);

  // Clean up WebSocket connection
  const cleanupConnection = useCallback(() => {
    if (ws.current) {
      // Remove all event listeners
      ws.current.onopen = null;
      ws.current.onclose = null;
      ws.current.onerror = null;
      ws.current.onmessage = null;
      
      // Close the connection if it's still open
      if (ws.current.readyState === WebSocket.OPEN) {
        ws.current.close(1000, 'Closing connection');
      }
      
      ws.current = null;
    }
    
    // Clear any pending timeouts or intervals
    if (connectionTimeout.current) {
      clearTimeout(connectionTimeout.current);
      connectionTimeout.current = null;
    }
    
    if (heartbeatInterval.current) {
      clearInterval(heartbeatInterval.current);
      heartbeatInterval.current = null;
    }
    
    if (reconnectTimeout.current) {
      clearTimeout(reconnectTimeout.current);
      reconnectTimeout.current = null;
    }
  }, []);

  // Process queued messages
  const processMessageQueue = useCallback(() => {
    if (!ws.current || ws.current.readyState !== WebSocket.OPEN) {
      return;
    }
    
    while (messageQueue.current.length > 0) {
      const message = messageQueue.current.shift();
      try {
        ws.current.send(JSON.stringify(message));
      } catch (error) {
        console.error('Error sending queued message:', error);
        // Requeue the message if sending failed
        messageQueue.current.unshift(message);
        break;
      }
    }
  }, []);

  // Handle incoming WebSocket messages
  const handleMessage = useCallback((event) => {
    if (!isMounted.current) return;
    
    try {
      const message = JSON.parse(event.data);
      console.debug('WebSocket message received:', message);
      
      // Update last activity timestamp
      lastActivity.current = Date.now();
      
      // Handle message based on type
      switch (message.type) {
        case MESSAGE_TYPES.WELCOME:
          // Clear connection timeout on successful authentication
          if (connectionTimeout.current) {
            clearTimeout(connectionTimeout.current);
            connectionTimeout.current = null;
          }
          
          setConnectionStatus(CONNECTION_STATUS.AUTHENTICATED);
          setIsAuthenticated(true);
          setConnectionId(message.connectionId);
          setUserId(message.userId);
          reconnectAttempts.current = 0;
          
          // Set up heartbeat interval
          if (heartbeatInterval.current) {
            clearInterval(heartbeatInterval.current);
          }
          heartbeatInterval.current = setInterval(() => {
            if (ws.current?.readyState === WebSocket.OPEN) {
              ws.current.send(JSON.stringify({ type: MESSAGE_TYPES.PING }));
            }
          }, CONFIG.HEARTBEAT_INTERVAL);
          
          // Process any queued messages
          processMessageQueue();
          break;
          
        case MESSAGE_TYPES.PONG:
          // Update last activity on pong
          lastActivity.current = Date.now();
          break;
          
        case MESSAGE_TYPES.ERROR:
          console.error('WebSocket error:', message.error);
          if (ws.current) {
            ws.current.close(4000, message.error || 'Unknown error');
          }
          break;
          
        default:
          // Forward other messages to registered handlers
          const handlers = messageHandlers.current.get(message.type);
          if (handlers) {
            handlers.forEach(handler => {
              try {
                handler(message);
              } catch (error) {
                console.error(`Error in message handler for type ${message.type}:`, error);
              }
            });
          }
      }
    
    // Clean up connection
    cleanupConnection();
    
    // Update state
    setIsAuthenticated(false);
    setConnectionId(null);
    setUserId(null);
    
    // Handle reconnection if needed
    if (code === 1000 || code === 1001) {
      // Normal closure
      setConnectionStatus(CONNECTION_STATUS.DISCONNECTED);
    } else if (code === 4001 || code === 4003) {
      // Authentication errors - don't reconnect
      console.error('Authentication failed, not reconnecting');
      setConnectionStatus(CONNECTION_STATUS.ERROR);
    } else {
      // Other errors - attempt to reconnect
      attemptReconnect();
    }
  }, [cleanupConnection, setConnectionStatus, setIsAuthenticated, setConnectionId, setUserId]);

  // Attempt to reconnect with exponential backoff
  const attemptReconnect = useCallback(() => {
    if (!isMounted.current || !getToken()) {
      return;
    }
    
    if (reconnectAttempts.current < CONFIG.MAX_RECONNECT_ATTEMPTS) {
      const baseDelay = Math.min(
        CONFIG.RECONNECT_DELAY * Math.pow(2, reconnectAttempts.current),
        CONFIG.MAX_RECONNECT_DELAY
      );
      const jitter = Math.random() * 1000; // Add jitter to prevent thundering herd
      const delay = Math.floor(baseDelay + jitter);
      
      reconnectAttempts.current += 1;
      setConnectionStatus(CONNECTION_STATUS.RECONNECTING);
      
      console.log(`Reconnecting in ${Math.round(delay / 1000)}s... (attempt ${reconnectAttempts.current})`);
      
      reconnectTimeout.current = setTimeout(() => {
        if (isMounted.current) {
          connect();
        }
      }, delay);
    } else {
      console.error('Max reconnection attempts reached');
      setConnectionStatus(CONNECTION_STATUS.ERROR);
    }
  }, [connect, getToken, isMounted, setConnectionStatus]);

  // Initialize WebSocket connection
  const connect = useCallback(async () => {
    if (!isMounted.current) return;
    
    // Clean up any existing connection first
    cleanupConnection();
    
    const token = getToken();
    if (!token) {
      console.log('No auth token available, not connecting WebSocket');
      setConnectionStatus(CONNECTION_STATUS.DISCONNECTED);
      return;
    }
    
    // Don't reconnect with the same token if already connected/connecting
    if (ws.current && latestToken.current === token) {
      const state = ws.current.readyState;
      if (state === WebSocket.OPEN || state === WebSocket.CONNECTING) {
        console.log('WebSocket already connected/connecting with the same token');
        return;
      }
    }
    
    latestToken.current = token;
    setConnectionStatus(CONNECTION_STATUS.CONNECTING);
    reconnectAttempts.current = 0;
    
    try {
      // Construct WebSocket URL
      let wsUrl;
      if (process.env.NODE_ENV === 'production') {
        wsUrl = 'wss://gideons-tech-suite.onrender.com/ws';
      } else {
        const apiUrl = new URL(API_URL);
        const protocol = apiUrl.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsPath = apiUrl.pathname.replace(/\/api\/v1$/, '');
        wsUrl = `${protocol}//${apiUrl.host}${wsPath}/ws`;
      }
      
      console.log(`Connecting to WebSocket at ${wsUrl}`);
      
      // Create new WebSocket connection with token in the protocol
      const newSocket = new WebSocket(wsUrl, [token]);
      ws.current = newSocket;
      
      // Set up connection timeout
      connectionTimeout.current = setTimeout(() => {
        if (ws.current && ws.current.readyState === WebSocket.CONNECTING) {
          console.warn('WebSocket connection timeout');
          ws.current.close(4002, 'Connection timeout');
        }
      }, CONFIG.CONNECTION_TIMEOUT);
      
      // Set up event handlers
      newSocket.onopen = () => {
        if (!isMounted.current) return;
        console.log('WebSocket connected, authenticating...');
        setConnectionStatus(CONNECTION_STATUS.AUTHENTICATING);
        
        // Send authentication message
        newSocket.send(JSON.stringify({
          type: MESSAGE_TYPES.AUTHENTICATE,
          token: latestToken.current
        }));
      };
      
      newSocket.onmessage = handleMessage;
      newSocket.onclose = handleClose;
      newSocket.onerror = (error) => {
        console.error('WebSocket error:', error);
      };
      
    } catch (error) {
      console.error('Error connecting to WebSocket:', error);
      cleanupConnection();
      setConnectionStatus(CONNECTION_STATUS.ERROR);
      attemptReconnect();
    }
  }, [cleanupConnection, getToken, handleClose, handleMessage, attemptReconnect, setConnectionStatus]);

  // Register message handler
  const onMessage = useCallback((type, handler) => {
    if (!type || typeof handler !== 'function') return () => {};
    
    const handlers = messageHandlers.current.get(type) || new Set();
    handlers.add(handler);
    messageHandlers.current.set(type, handlers);
    
    // Return cleanup function
    return () => {
      const currentHandlers = messageHandlers.current.get(type);
      if (currentHandlers) {
        currentHandlers.delete(handler);
        if (currentHandlers.size === 0) {
          messageHandlers.current.delete(type);
        }
      }
    };
  }, []);

  // Send a message through the WebSocket
  const sendMessage = useCallback((message) => {
    if (!isMounted.current) {
      console.warn('Cannot send message - component unmounted');
      return Promise.reject('Component unmounted');
    }
    
    if (!message || typeof message !== 'object') {
      console.error('Invalid message format');
      return Promise.reject('Invalid message format');
    }
    
    return new Promise((resolve, reject) => {
      if (!ws.current || ws.current.readyState !== WebSocket.OPEN) {
        // Queue the message if not connected
        if (messageQueue.current.length < CONFIG.MAX_QUEUE_SIZE) {
          messageQueue.current.push(message);
          console.log('WebSocket not connected, message queued');
        } else {
          console.error('Message queue full, dropping message');
          reject('Message queue full');
        }
        return;
      }
      
      try {
        ws.current.send(JSON.stringify(message));
        resolve();
      } catch (error) {
        console.error('Error sending message:', error);
        reject(error);
      }
    });
  }, []);

  // Authenticate with the WebSocket server
  const authenticate = useCallback(async () => {
    const token = getToken();
    if (!token) {
      console.error('No authentication token available');
      return false;
    }
    
    try {
      await sendMessage({
        type: MESSAGE_TYPES.AUTHENTICATE,
        token
      });
      return true;
    } catch (error) {
      console.error('Authentication failed:', error);
      return false;
    }
  }, [getToken, sendMessage]);

  // Set up and clean up WebSocket connection
  useEffect(() => {
    isMounted.current = true;
    
    // Initial connection if we have a token
    const token = getToken();
    if (token) {
      connect();
    }
    
    // Cleanup function
    return () => {
      isMounted.current = false;
      cleanupConnection();
      
      if (reconnectTimeout.current) {
        clearTimeout(reconnectTimeout.current);
        reconnectTimeout.current = null;
      }
      
      if (connectionTimeout.current) {
        clearTimeout(connectionTimeout.current);
        connectionTimeout.current = null;
      }
      
      if (heartbeatInterval.current) {
        clearInterval(heartbeatInterval.current);
        heartbeatInterval.current = null;
      }
      
      messageQueue.current = [];
      messageHandlers.current.clear();
    };
  }, [connect, getToken, cleanupConnection]);

  // Reconnect when token changes
  useEffect(() => {
    if (latestToken.current !== getToken()) {
      connect();
    }
  }, [getToken, connect]);

  // Context value
  const contextValue = useMemo(() => ({
    socket: ws.current,
    isConnected: connectionStatus === CONNECTION_STATUS.CONNECTED || 
                 connectionStatus === CONNECTION_STATUS.AUTHENTICATED,
    isAuthenticated: connectionStatus === CONNECTION_STATUS.AUTHENTICATED,
    connectionStatus,
    connectionId,
    userId,
    sendMessage,
    onMessage,
    authenticate
  }), [
    connectionStatus, 
    connectionId, 
    userId, 
    sendMessage, 
    onMessage, 
    authenticate
  ]);

  return (
    <WebSocketContext.Provider value={contextValue}>
      {children}
    </WebSocketContext.Provider>
  );
};

export default WebSocketContext;
